#!/usr/bin/env python3

import os
import subprocess
import datetime
import argparse
import flescfg

def main():
    parser = argparse.ArgumentParser(description='Generate Flesnet and SPM configurations.')
    parser.add_argument('config', help='Path to the configuration file')
    parser.add_argument('run_id', help='Run ID')
    args = parser.parse_args()

    config_file = args.config
    run_id = args.run_id

    # global parameters, may be overwritten by environment
    FLESNETDIR = os.getenv('FLESNETDIR', '/usr/bin/')
    FLESCTLDIR = os.getenv('FLESCTLDIR', '/opt/fles/bin/')
    SPMDIR = os.getenv('SPMDIR', '/opt/spm/')
    RUNDIR = os.getenv('RUNDIR', '')
    LOGDIR = os.getenv('LOGDIR', 'log/')
    FLESNET_CFG = os.getenv('FLESNET_CFG', os.path.join(RUNDIR, 'flesnet.cfg'))
    SPM_CFG = os.getenv('SPM_CFG', os.path.join(RUNDIR, 'readout.spm'))

    # default configuration
    TSBUF_DATA_SIZE_EXP = 27
    TSBUF_DESC_SIZE_EXP = 19

    # load the config file
    config = flescfg.load(config_file)
    if config is None:
        print("Error loading configuration file.")
        exit(1)
    
    INPUT = config['use_entry_nodes']
    OUTPUT = config['use_build_nodes']
    TRANSPORT = config['common']['transport']
    TIMESLICE_SIZE = config['common']['timeslice_size']
    OVERLAP_SIZE = config['common']['timeslice_overlap']
    TSCLIENT_PARAM = config['common']['tsclient_param']
    EXTRA_CMD = config['common']['extra_cmd']

    # read node list into python lists
    EN_LIST = subprocess.check_output(["scontrol", "show", "hostname", INPUT]).decode().split()
    PN_LIST = subprocess.check_output(["scontrol", "show", "hostname", OUTPUT]).decode().split()

    print("Generating configs for", EN_LIST, PN_LIST)
    print("Writing output to", FLESNET_CFG, "and", SPM_CFG)

    # entry nodes
    EN_CFG = []
    EN_INDEX = []
    EN_SPM = []
    CRI_SPM = []
    input = 0

    SHM_PREFIX = 'cri_'
    for node in EN_LIST:
        nodeinfo = config["entry_nodes"][node]
        for card in nodeinfo['cards']:
            cardinfo = nodeinfo['cards'][card]
            shm_channel = 0
            for channel in range(8):
                if channel in cardinfo["channels"]:
                    EN_CFG.append(f"input = shm://{nodeinfo['address']}/{SHM_PREFIX}{card}/{shm_channel}?overlap={OVERLAP_SIZE}")
                    EN_INDEX.append(f"-i{input}")
                    shm_channel += 1
                    input += 1
            EN_CFG.append("")
            CRI_SPM.append(f"cri_{node}_{cardinfo['pci_address'][:2]}")
        EN_SPM.append(f"{node}: bash -c \"LOGDIR={LOGDIR}{node}_ {FLESCTLDIR}/fles_input.py {config_file} {node}\"")
        EN_SPM.append(f"{node}: bash -c \"{SPMDIR}spm-require -n1 fles_input_sem; {FLESNETDIR}flesnet -m -f {FLESNET_CFG} -L {LOGDIR}{node}_flesnet_en.log --log-syslog {' '.join(EN_INDEX)}\"")
        EN_INDEX = []

    # processing nodes
    SHM_PREFIX = f'flesnet_{datetime.datetime.now().strftime("%S%f")}_'
    PN_CFG = []
    PN_SPM = []
    output = 0
    for node in PN_LIST:
        nodeinfo = config["build_nodes"][node]
        TSCLIENT_COUNT = len(TSCLIENT_PARAM)
        PN_CFG.append(f"output = shm://{nodeinfo['address']}/{SHM_PREFIX}{output}?datasize={TSBUF_DATA_SIZE_EXP}&descsize={TSBUF_DESC_SIZE_EXP}")
        PN_SPM.append(f"{node}: bash -c '{FLESNETDIR}preclean; {FLESNETDIR}flesnet -m -f {FLESNET_CFG} -L {LOGDIR}{node}_flesnet_pn.log --log-syslog -o{output}'")
        client = 0
        for param in TSCLIENT_PARAM:
            param = param.replace('%run_id%', run_id).replace('%client%', str(client)).replace('%shm_id%', f"{SHM_PREFIX}{output}")
            PN_SPM.append(f"{node}: {FLESNETDIR}tsclient -c{output} -L {LOGDIR}{node}_{client}_tsclient.log --log-syslog {param}")
            client += 1
        for cmd in EXTRA_CMD:
            cmd = cmd.replace('%run_id%', run_id).replace('%shm_id%', f"{SHM_PREFIX}{output}")
            PN_SPM.append(f"{node}: {cmd}")
        output += 1

    GLOBAL_CFG = [
        f"transport = {TRANSPORT}",
        f"timeslice-size = {TIMESLICE_SIZE}",
        "processor-executable = /bin/true"
    ]

    with open(FLESNET_CFG, 'w') as f:
        f.write(f"# Flesnet configuration autogenerated from {config_file} at {datetime.datetime.now()}\n")
        f.write("\n# Global configuration\n")
        f.write("\n".join(GLOBAL_CFG) + "\n")
        f.write("\n# Entry nodes\n")
        f.write("\n".join(EN_CFG))
        f.write("\n# Processing nodes\n")
        f.write("\n".join(PN_CFG) + "\n")

    with open(SPM_CFG, 'w') as f:
        f.write(f"# SPM configuration autogenerated from {config_file} at {datetime.datetime.now()}\n")
        if CRI_SPM:
            f.write("\n# CRIs\n")
            # TODO: for now we don't want licences
            #f.write("#SPM-RUN --licenses={}\n".format(",".join(CRI_SPM)))
        f.write("\n# Entry nodes\n")
        f.write("\n".join(EN_SPM) + "\n")
        f.write("\n# Processing nodes\n")
        f.write("\n".join(PN_SPM) + "\n")

if __name__ == "__main__":
    main()
