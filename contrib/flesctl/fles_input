#!/bin/bash

set -e  # stop on error
set -m  # run all processes in a separate process group
set -u  # ensure variables are defined

# debug flags
#set -v
#set -x

# global parameters, may be overwritten by environment
: ${FLESNETDIR:=/opt/fles/bin/}
: ${SPMDIR:=/opt/spm/}
: ${LOGDIR:=log/}
: ${SHM_PREFIX:=cri_}

###############################################################
# command line parameters
if [ "$#" -ne 2 ]; then
  echo "Usage: $0 <config> <hostname>"
  exit 1
fi

source "$1"
hostconfig "$2"

###############################################################
# start procecces
declare -a SERVER_PID

cleanup () {
    echo "Cleaning up ..." | tee -a ${LOGDIR}fles_input.log
    # kill all procecces in this session
    pkill -9 -s $SID cri_server
    rm /dev/shm/${SHM_PREFIX}*
    exit -1
}

# the shutdown procedure
end_readout () {
    set +e
    echo "Shutting down ..." | tee -a ${LOGDIR}fles_input.log
    ${FLESNETDIR}cri_en_pgen 0 >> ${LOGDIR}cri_en_pgen.log
    for i in ${!SERVER_PID[*]}; do
        kill -s SIGINT ${SERVER_PID[$i]} 2>/dev/null
    done
    sleep 3
    # check if any process is left
    for i in ${!SERVER_PID[*]}; do
        if kill -0 ${SERVER_PID[$i]} > /dev/null 2>&1 ; then
            echo "Cleanup required, cri_server left." | tee -a ${LOGDIR}fles_input.log
            cleanup
        fi
    done
    echo "Exiting" | tee -a ${LOGDIR}fles_input.log
    exit 0
}

END_REQUESTED=false
request_end () {
    END_REQUESTED=true
}
# set end request on signal
trap request_end SIGINT SIGTERM SIGHUP


echo "Starting readout ..." | tee -a ${LOGDIR}fles_input.log

${FLESNETDIR}cri_info > ${LOGDIR}cri_info.log

echo "Configuring CRIs ..." | tee -a ${LOGDIR}fles_input.log
# round up to next possible size (given mc_size is min. size)
#PGEN_MC_SIZE=`echo "scale=0; (${MC_SIZE_NS}+1024-1)/1024" | bc -l`
# round down to next possible size (given mc_size is max. size)
PGEN_MC_SIZE=`echo "scale=0; ${MC_SIZE_NS}/1000" | bc -l`
for i in ${!ADDR[*]}; do
    ${FLESNETDIR}cri_cfg -l 2 -L ${LOGDIR}cri${i}_cfg.log -i ${ADDR[$i]} \
                     -t $PGEN_MC_SIZE -r $PGEN_RATE \
                     --mc-size-limit $MC_SIZE_LIMIT_BYTES \
                     --c0_source ${LINK[0+$i*8]} --c0_eq_id ${BASE_EQID[$i]}0 \
                     --c1_source ${LINK[1+$i*8]} --c1_eq_id ${BASE_EQID[$i]}1 \
                     --c2_source ${LINK[2+$i*8]} --c2_eq_id ${BASE_EQID[$i]}2 \
                     --c3_source ${LINK[3+$i*8]} --c3_eq_id ${BASE_EQID[$i]}3 \
                     --c4_source ${LINK[4+$i*8]} --c4_eq_id ${BASE_EQID[$i]}4 \
                     --c5_source ${LINK[5+$i*8]} --c5_eq_id ${BASE_EQID[$i]}5 \
                     --c6_source ${LINK[6+$i*8]} --c6_eq_id ${BASE_EQID[$i]}6 \
                     --c7_source ${LINK[7+$i*8]} --c7_eq_id ${BASE_EQID[$i]}7
done

echo "Starting cri_server ..." | tee -a ${LOGDIR}fles_input.log
for cri in ${!ADDR[*]}; do
    ${FLESNETDIR}cri_server -c /dev/null -L ${LOGDIR}cri${cri}_server.log --log-syslog -i ${ADDR[$cri]} \
                        --data-buffer-size-exp $BUF_SIZE_EXP -o $SHM_PREFIX$cri -e "${SPMDIR}spm-provide cri_server_sem" &
    SERVER_PID+=($!)
done

# get group ID for cleanup
SID=$(trap '' SIGINT SIGTERM SIGHUP && ps o sid -p ${SERVER_PID[0]} | tail -n1)

# block till server is ready
echo "Waiting for ${#SERVER_PID[@]} cri_server instance(s) ..." | tee -a ${LOGDIR}fles_input.log
${SPMDIR}spm-require -n${#SERVER_PID[@]} cri_server_sem
echo "... all cri_server(s) started" | tee -a ${LOGDIR}fles_input.log

# first oppertunity to safely shutdown
if ${END_REQUESTED} ; then
    end_readout
fi

sleep 1
echo "Enabling pattern generators ..." | tee -a ${LOGDIR}fles_input.log
# TODO: for now we simple enable all, even if unused
${FLESNETDIR}cri_en_pgen 1 >> ${LOGDIR}cri_en_pgen.log

# from this point it is safe to shut down any time
trap end_readout SIGINT SIGTERM SIGHUP
# check for race conditions
if ${END_REQUESTED} ; then
    end_readout
fi

${SPMDIR}spm-provide fles_input_sem
echo "Running ..." | tee -a ${LOGDIR}fles_input.log
wait

echo "*** YOU SOULD NEVER SEE THIS ***" | tee -a ${LOGDIR}fles_input.log
